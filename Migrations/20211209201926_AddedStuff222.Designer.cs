// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurfThisUp.Areas.Identity.Data;

#nullable disable

namespace SurfThisUp.Migrations
{
    [DbContext(typeof(SurfThisUpContext))]
    [Migration("20211209201926_AddedStuff222")]
    partial class AddedStuff222
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.Availability", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.Rental", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SurfThisUpUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SurfThisUpUserId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.RentalItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RentalItem");
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.RentalPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvailabilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("RentalItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RentalItemId");

                    b.ToTable("RentalPosts");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.Date", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvailabilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TheDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.ResourcePath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RentalPostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SocialPostId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RentalPostId");

                    b.HasIndex("SocialPostId");

                    b.ToTable("ResourcePath");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RentalItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RentalPostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SocialPostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalItemId");

                    b.HasIndex("RentalPostId");

                    b.HasIndex("SocialPostId");

                    b.HasIndex("TagTypeId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("SurfThisUp.Models.Social.PostComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("SocialPostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SocialPostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("SurfThisUp.Models.Social.SocialPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialPosts");
                });

            modelBuilder.Entity("SurfThisUp.Models.Weather.WaveCondition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Direction")
                        .HasColumnType("real");

                    b.Property<float>("MaxWaveHeight")
                        .HasColumnType("real");

                    b.Property<float>("MaxWavePeriod")
                        .HasColumnType("real");

                    b.Property<float>("SigWaveHeight")
                        .HasColumnType("real");

                    b.Property<float>("SigWavePeriod")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("WaveCondition");
                });

            modelBuilder.Entity("SurfThisUp.Models.Weather.WeatherCondition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Temp")
                        .HasColumnType("real");

                    b.Property<string>("WaveConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WeatherType")
                        .HasColumnType("int");

                    b.Property<string>("WindConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DateId");

                    b.HasIndex("LocationId");

                    b.HasIndex("WaveConditionId");

                    b.HasIndex("WindConditionId");

                    b.ToTable("WeatherConditions");
                });

            modelBuilder.Entity("SurfThisUp.Models.Weather.WindCondition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("AvgSpeed")
                        .HasColumnType("real");

                    b.Property<float>("Direction")
                        .HasColumnType("real");

                    b.Property<float>("MaxSpeed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("WindCondition");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.Rental", b =>
                {
                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", null)
                        .WithMany("Rentals")
                        .HasForeignKey("SurfThisUpUserId");
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.RentalPost", b =>
                {
                    b.HasOne("SurfThisUp.Models.Rent.Availability", "Availability")
                        .WithMany()
                        .HasForeignKey("AvailabilityId");

                    b.HasOne("SurfThisUp.Models.Shared.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurfThisUp.Models.Shared.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", "Owner")
                        .WithMany("RentalPosts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurfThisUp.Models.Rent.RentalItem", "RentalItem")
                        .WithMany()
                        .HasForeignKey("RentalItemId");

                    b.Navigation("Availability");

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("RentalItem");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.Date", b =>
                {
                    b.HasOne("SurfThisUp.Models.Rent.Availability", null)
                        .WithMany("Dates")
                        .HasForeignKey("AvailabilityId");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.ResourcePath", b =>
                {
                    b.HasOne("SurfThisUp.Models.Rent.RentalPost", null)
                        .WithMany("ResourcePaths")
                        .HasForeignKey("RentalPostId");

                    b.HasOne("SurfThisUp.Models.Social.SocialPost", null)
                        .WithMany("Resources")
                        .HasForeignKey("SocialPostId");
                });

            modelBuilder.Entity("SurfThisUp.Models.Shared.Tag", b =>
                {
                    b.HasOne("SurfThisUp.Models.Rent.RentalItem", null)
                        .WithMany("Tags")
                        .HasForeignKey("RentalItemId");

                    b.HasOne("SurfThisUp.Models.Rent.RentalPost", null)
                        .WithMany("Tags")
                        .HasForeignKey("RentalPostId");

                    b.HasOne("SurfThisUp.Models.Social.SocialPost", null)
                        .WithMany("Tags")
                        .HasForeignKey("SocialPostId");

                    b.HasOne("SurfThisUp.Models.Shared.Category", "TagType")
                        .WithMany()
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("SurfThisUp.Models.Social.PostComment", b =>
                {
                    b.HasOne("SurfThisUp.Models.Social.SocialPost", null)
                        .WithMany("PostComments")
                        .HasForeignKey("SocialPostId");

                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurfThisUp.Models.Social.SocialPost", b =>
                {
                    b.HasOne("SurfThisUp.Models.Shared.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurfThisUp.Models.Weather.WeatherCondition", b =>
                {
                    b.HasOne("SurfThisUp.Models.Shared.Date", "Date")
                        .WithMany()
                        .HasForeignKey("DateId");

                    b.HasOne("SurfThisUp.Models.Shared.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SurfThisUp.Models.Weather.WaveCondition", "WaveCondition")
                        .WithMany()
                        .HasForeignKey("WaveConditionId");

                    b.HasOne("SurfThisUp.Models.Weather.WindCondition", "WindCondition")
                        .WithMany()
                        .HasForeignKey("WindConditionId");

                    b.Navigation("Date");

                    b.Navigation("Location");

                    b.Navigation("WaveCondition");

                    b.Navigation("WindCondition");
                });

            modelBuilder.Entity("SurfThisUp.Areas.Identity.Data.SurfThisUpUser", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("RentalPosts");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.Availability", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.RentalItem", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SurfThisUp.Models.Rent.RentalPost", b =>
                {
                    b.Navigation("ResourcePaths");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SurfThisUp.Models.Social.SocialPost", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("Resources");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
